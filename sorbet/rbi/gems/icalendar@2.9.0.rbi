# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `icalendar` gem.
# Please instead update this file by running `bin/tapioca gem icalendar`.

# source://icalendar//lib/icalendar/logger.rb#6
module Icalendar
  class << self
    # source://icalendar//lib/icalendar/downcased_hash.rb#34
    def DowncasedHash(base); end

    # source://icalendar//lib/icalendar.rb#9
    def logger; end

    # source://icalendar//lib/icalendar.rb#13
    def logger=(logger); end

    # source://icalendar//lib/icalendar.rb#17
    def parse(source, single = T.unsafe(nil)); end
  end
end

# source://icalendar//lib/icalendar/alarm.rb#5
class Icalendar::Alarm < ::Icalendar::Component
  # @return [Alarm] a new instance of Alarm
  #
  # source://icalendar//lib/icalendar/alarm.rb#25
  def initialize; end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def acknowledged; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def acknowledged=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def action; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def action=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_attach(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_attendee(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def attach; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def attach=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def attendee; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def attendee=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def description; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def description=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def duration; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def duration=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def repeat; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def repeat=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def summary; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def summary=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def trigger; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def trigger=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def uid; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def uid=(value); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/alarm.rb#30
  def valid?(strict = T.unsafe(nil)); end
end

# source://icalendar//lib/icalendar/calendar.rb#5
class Icalendar::Calendar < ::Icalendar::Component
  # @return [Calendar] a new instance of Calendar
  #
  # source://icalendar//lib/icalendar/calendar.rb#27
  def initialize; end

  # source://icalendar//lib/icalendar/calendar.rb#49
  def add; end

  # source://icalendar//lib/icalendar/has_components.rb#94
  def add_event(c); end

  # source://icalendar//lib/icalendar/has_components.rb#94
  def add_freebusy(c); end

  # source://icalendar//lib/icalendar/has_components.rb#94
  def add_journal(c); end

  # source://icalendar//lib/icalendar/has_components.rb#94
  def add_timezone(c); end

  # source://icalendar//lib/icalendar/has_components.rb#94
  def add_todo(c); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_categories(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_description(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_image(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_ip_name(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def calscale; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def calscale=(value); end

  # source://icalendar//lib/icalendar/calendar.rb#54
  def cancel; end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def categories; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def categories=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def color; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def color=(value); end

  # source://icalendar//lib/icalendar/calendar.rb#64
  def counter; end

  # source://icalendar//lib/icalendar/calendar.rb#69
  def decline_counter; end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def description; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def description=(value); end

  # source://icalendar//lib/icalendar/has_components.rb#76
  def event(c = T.unsafe(nil), &block); end

  # source://icalendar//lib/icalendar/has_components.rb#68
  def events; end

  # source://icalendar//lib/icalendar/has_components.rb#90
  def find_event(id); end

  # source://icalendar//lib/icalendar/has_components.rb#90
  def find_freebusy(id); end

  # source://icalendar//lib/icalendar/has_components.rb#90
  def find_journal(id); end

  # source://icalendar//lib/icalendar/has_components.rb#90
  def find_timezone(id); end

  # source://icalendar//lib/icalendar/has_components.rb#90
  def find_todo(id); end

  # source://icalendar//lib/icalendar/has_components.rb#76
  def freebusy(c = T.unsafe(nil), &block); end

  # source://icalendar//lib/icalendar/has_components.rb#68
  def freebusys; end

  # source://icalendar//lib/icalendar/has_components.rb#98
  def has_event?; end

  # source://icalendar//lib/icalendar/has_components.rb#98
  def has_freebusy?; end

  # source://icalendar//lib/icalendar/has_components.rb#98
  def has_journal?; end

  # source://icalendar//lib/icalendar/has_components.rb#98
  def has_timezone?; end

  # source://icalendar//lib/icalendar/has_components.rb#98
  def has_todo?; end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def image; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def image=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def ip_method; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def ip_method=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def ip_name; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def ip_name=(value); end

  # source://icalendar//lib/icalendar/has_components.rb#76
  def journal(c = T.unsafe(nil), &block); end

  # source://icalendar//lib/icalendar/has_components.rb#68
  def journals; end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def last_modified; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def last_modified=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def prodid; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def prodid=(value); end

  # source://icalendar//lib/icalendar/calendar.rb#34
  def publish; end

  # source://icalendar//lib/icalendar/calendar.rb#59
  def refresh; end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def refresh_interval; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def refresh_interval=(value); end

  # source://icalendar//lib/icalendar/calendar.rb#44
  def reply; end

  # source://icalendar//lib/icalendar/calendar.rb#39
  def request; end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def source; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def source=(value); end

  # source://icalendar//lib/icalendar/has_components.rb#76
  def timezone(c = T.unsafe(nil), &block); end

  # source://icalendar//lib/icalendar/has_components.rb#68
  def timezones; end

  # source://icalendar//lib/icalendar/has_components.rb#76
  def todo(c = T.unsafe(nil), &block); end

  # source://icalendar//lib/icalendar/has_components.rb#68
  def todos; end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def uid; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def uid=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def url; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def url=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def version; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def version=(value); end
end

# source://icalendar//lib/icalendar/component.rb#7
class Icalendar::Component
  include ::Icalendar::HasProperties
  include ::Icalendar::HasComponents
  extend ::Icalendar::HasProperties::ClassMethods
  extend ::Icalendar::HasComponents::ClassMethods

  # @return [Component] a new instance of Component
  #
  # source://icalendar//lib/icalendar/component.rb#22
  def initialize(name, ical_name = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/has_components.rb#10
  def custom_components; end

  # source://icalendar//lib/icalendar/has_properties.rb#10
  def custom_properties; end

  # Returns the value of attribute ical_name.
  #
  # source://icalendar//lib/icalendar/component.rb#12
  def ical_name; end

  # Returns the value of attribute name.
  #
  # source://icalendar//lib/icalendar/component.rb#11
  def name; end

  # source://icalendar//lib/icalendar/component.rb#28
  def new_uid; end

  # Returns the value of attribute parent.
  #
  # source://icalendar//lib/icalendar/component.rb#13
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://icalendar//lib/icalendar/component.rb#13
  def parent=(_arg0); end

  # source://icalendar//lib/icalendar/component.rb#32
  def to_ical; end

  private

  # source://icalendar//lib/icalendar/component.rb#101
  def ical_components; end

  # source://icalendar//lib/icalendar/component.rb#66
  def ical_fold(long_line, indent = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/component.rb#60
  def ical_prop_name(prop_name); end

  # source://icalendar//lib/icalendar/component.rb#43
  def ical_properties; end

  class << self
    # source://icalendar//lib/icalendar/component.rb#15
    def parse(source); end

    private

    # source://icalendar//lib/icalendar/component.rb#113
    def _parse(source); end
  end
end

# source://icalendar//lib/icalendar/component.rb#64
Icalendar::Component::ICAL_FOLD_LONG_LINE_SCAN_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/component.rb#58
Icalendar::Component::ICAL_PROP_NAME_GSUB_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/downcased_hash.rb#6
class Icalendar::DowncasedHash < ::SimpleDelegator
  # @return [DowncasedHash] a new instance of DowncasedHash
  #
  # source://icalendar//lib/icalendar/downcased_hash.rb#8
  def initialize(base); end

  # source://icalendar//lib/icalendar/downcased_hash.rb#19
  def [](key); end

  # source://icalendar//lib/icalendar/downcased_hash.rb#15
  def []=(key, value); end

  # source://icalendar//lib/icalendar/downcased_hash.rb#29
  def delete(key, &block); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/downcased_hash.rb#23
  def has_key?(key); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/downcased_hash.rb#23
  def include?(key); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/downcased_hash.rb#23
  def member?(key); end
end

# source://icalendar//lib/icalendar/event.rb#5
class Icalendar::Event < ::Icalendar::Component
  # @return [Event] a new instance of Event
  #
  # source://icalendar//lib/icalendar/event.rb#48
  def initialize; end

  # source://icalendar//lib/icalendar/has_components.rb#94
  def add_alarm(c); end

  # source://icalendar//lib/icalendar/has_components.rb#76
  def alarm(c = T.unsafe(nil), &block); end

  # source://icalendar//lib/icalendar/has_components.rb#68
  def alarms; end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_attach(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_attendee(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_categories(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_comment(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_conference(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_contact(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_exdate(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_image(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rdate(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_related_to(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_request_status(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_resources(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rrule(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def attach; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def attach=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def attendee; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def attendee=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def categories; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def categories=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def color; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def color=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def comment; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def comment=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def conference; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def conference=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def contact; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def contact=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def created; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def created=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def description; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def description=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtend; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtend=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstamp; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstamp=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstart; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstart=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def duration; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def duration=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def exdate; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def exdate=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def geo; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def geo=(value); end

  # source://icalendar//lib/icalendar/has_components.rb#98
  def has_alarm?; end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def image; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def image=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def ip_class; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def ip_class=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def last_modified; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def last_modified=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def location; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def location=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def organizer; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def organizer=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def priority; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def priority=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rdate; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rdate=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def recurrence_id; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def recurrence_id=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def related_to; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def related_to=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def request_status; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def request_status=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def resources; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def resources=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rrule; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rrule=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def sequence; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def sequence=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def status; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def status=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def summary; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def summary=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def transp; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def transp=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def uid; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def uid=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def url; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def url=(value); end
end

# source://icalendar//lib/icalendar/freebusy.rb#5
class Icalendar::Freebusy < ::Icalendar::Component
  # @return [Freebusy] a new instance of Freebusy
  #
  # source://icalendar//lib/icalendar/freebusy.rb#21
  def initialize; end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_attendee(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_comment(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_freebusy(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_request_status(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def attendee; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def attendee=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def comment; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def comment=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def contact; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def contact=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtend; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtend=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstamp; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstamp=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstart; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstart=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def freebusy; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def freebusy=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def organizer; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def organizer=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def request_status; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def request_status=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def uid; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def uid=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def url; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def url=(value); end
end

# source://icalendar//lib/icalendar/has_components.rb#5
module Icalendar::HasComponents
  mixes_in_class_methods ::Icalendar::HasComponents::ClassMethods

  # source://icalendar//lib/icalendar/has_components.rb#14
  def initialize(*args); end

  # @yield [c]
  #
  # source://icalendar//lib/icalendar/has_components.rb#19
  def add_component(c); end

  # @yield [c]
  #
  # source://icalendar//lib/icalendar/has_components.rb#26
  def add_custom_component(component_name, c); end

  # source://icalendar//lib/icalendar/has_components.rb#33
  def custom_component(component_name); end

  # source://icalendar//lib/icalendar/has_components.rb#40
  def method_missing(method, *args, &block); end

  private

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/has_components.rb#53
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://icalendar//lib/icalendar/has_components.rb#7
    def included(base); end
  end
end

# source://icalendar//lib/icalendar/has_components.rb#58
module Icalendar::HasComponents::ClassMethods
  # source://icalendar//lib/icalendar/has_components.rb#63
  def component(singular_name, find_by = T.unsafe(nil), klass = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/has_components.rb#59
  def components; end
end

# source://icalendar//lib/icalendar/has_components.rb#37
Icalendar::HasComponents::METHOD_MISSING_ADD_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/has_components.rb#38
Icalendar::HasComponents::METHOD_MISSING_X_FLAG_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/has_properties.rb#5
module Icalendar::HasProperties
  mixes_in_class_methods ::Icalendar::HasProperties::ClassMethods

  # source://icalendar//lib/icalendar/has_properties.rb#14
  def initialize(*args); end

  # source://icalendar//lib/icalendar/has_properties.rb#47
  def append_custom_property(property_name, value); end

  # source://icalendar//lib/icalendar/has_properties.rb#43
  def custom_property(property_name); end

  # source://icalendar//lib/icalendar/has_properties.rb#60
  def method_missing(method, *args, &block); end

  # source://icalendar//lib/icalendar/has_properties.rb#34
  def property(property_name); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/has_properties.rb#19
  def valid?(strict = T.unsafe(nil)); end

  private

  # source://icalendar//lib/icalendar/has_properties.rb#174
  def map_property_value(value, klass, multi_valued, new_property); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/has_properties.rb#73
  def respond_to_missing?(method, include_private = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://icalendar//lib/icalendar/has_properties.rb#7
    def included(base); end
  end
end

# source://icalendar//lib/icalendar/has_properties.rb#77
module Icalendar::HasProperties::ClassMethods
  # source://icalendar//lib/icalendar/has_properties.rb#102
  def default_property_types; end

  # source://icalendar//lib/icalendar/has_properties.rb#144
  def multi_property(prop, klass, new_property); end

  # source://icalendar//lib/icalendar/has_properties.rb#86
  def multiple_properties; end

  # source://icalendar//lib/icalendar/has_properties.rb#98
  def mutex_properties; end

  # source://icalendar//lib/icalendar/has_properties.rb#122
  def mutually_exclusive_properties(*properties); end

  # source://icalendar//lib/icalendar/has_properties.rb#126
  def optional_property(prop, klass = T.unsafe(nil), suggested_single = T.unsafe(nil), new_property = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/has_properties.rb#118
  def optional_single_property(prop, klass = T.unsafe(nil), new_property = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/has_properties.rb#78
  def properties; end

  # source://icalendar//lib/icalendar/has_properties.rb#112
  def required_multi_property(prop, klass = T.unsafe(nil), validator = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/has_properties.rb#90
  def required_properties; end

  # source://icalendar//lib/icalendar/has_properties.rb#106
  def required_property(prop, klass = T.unsafe(nil), validator = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/has_properties.rb#82
  def single_properties; end

  # source://icalendar//lib/icalendar/has_properties.rb#131
  def single_property(prop, klass, new_property); end

  # source://icalendar//lib/icalendar/has_properties.rb#94
  def suggested_single_properties; end
end

# source://icalendar//lib/icalendar/journal.rb#5
class Icalendar::Journal < ::Icalendar::Component
  # @return [Journal] a new instance of Journal
  #
  # source://icalendar//lib/icalendar/journal.rb#35
  def initialize; end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_attach(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_attendee(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_categories(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_comment(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_contact(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_description(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_exdate(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_image(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rdate(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_related_to(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_request_status(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rrule(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def attach; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def attach=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def attendee; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def attendee=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def categories; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def categories=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def color; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def color=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def comment; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def comment=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def contact; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def contact=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def created; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def created=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def description; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def description=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstamp; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstamp=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstart; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstart=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def exdate; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def exdate=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def image; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def image=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def ip_class; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def ip_class=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def last_modified; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def last_modified=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def organizer; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def organizer=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rdate; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rdate=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def recurrence_id; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def recurrence_id=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def related_to; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def related_to=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def request_status; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def request_status=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rrule; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rrule=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def sequence; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def sequence=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def status; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def status=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def summary; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def summary=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def uid; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def uid=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def url; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def url=(value); end
end

# source://icalendar//lib/icalendar/logger.rb#8
class Icalendar::Logger < ::SimpleDelegator
  # @return [Logger] a new instance of Logger
  #
  # source://icalendar//lib/icalendar/logger.rb#10
  def initialize(sink, level = T.unsafe(nil)); end
end

# source://icalendar//lib/icalendar.rb#7
Icalendar::MAX_LINE_LENGTH = T.let(T.unsafe(nil), Integer)

# source://icalendar//lib/icalendar/marshable.rb#4
module Icalendar::Marshable
  mixes_in_class_methods ::Icalendar::Marshable::ClassMethods

  # source://icalendar//lib/icalendar/marshable.rb#9
  def marshal_dump; end

  # source://icalendar//lib/icalendar/marshable.rb#18
  def marshal_load(serialized); end

  class << self
    # @private
    #
    # source://icalendar//lib/icalendar/marshable.rb#5
    def included(base); end
  end
end

# source://icalendar//lib/icalendar/marshable.rb#26
module Icalendar::Marshable::ClassMethods
  # source://icalendar//lib/icalendar/marshable.rb#31
  def transient_variable(name); end

  # source://icalendar//lib/icalendar/marshable.rb#27
  def transient_variables; end
end

# source://icalendar//lib/icalendar/parser.rb#8
class Icalendar::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://icalendar//lib/icalendar/parser.rb#29
  def initialize(source, strict = T.unsafe(nil), verbose = T.unsafe(nil)); end

  # Sets the attribute component_class
  #
  # @param value the value to set the attribute component_class to.
  #
  # source://icalendar//lib/icalendar/parser.rb#9
  def component_class=(_arg0); end

  # source://icalendar//lib/icalendar/parser.rb#110
  def get_wrapper_class(component, fields); end

  # source://icalendar//lib/icalendar/parser.rb#45
  def parse; end

  # source://icalendar//lib/icalendar/parser.rb#56
  def parse_property(component, fields = T.unsafe(nil)); end

  # Returns the value of attribute source.
  #
  # source://icalendar//lib/icalendar/parser.rb#10
  def source; end

  # Returns the value of attribute strict.
  #
  # source://icalendar//lib/icalendar/parser.rb#10
  def strict; end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/parser.rb#122
  def strict?; end

  # Returns the value of attribute timezone_store.
  #
  # source://icalendar//lib/icalendar/parser.rb#10
  def timezone_store; end

  # Returns the value of attribute verbose.
  #
  # source://icalendar//lib/icalendar/parser.rb#10
  def verbose; end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/parser.rb#126
  def verbose?; end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/parser.rb#103
  def wrap_in_array?(klass, value, multi_property); end

  # source://icalendar//lib/icalendar/parser.rb#83
  def wrap_property_value(component, fields, multi_property); end

  private

  # source://icalendar//lib/icalendar/parser.rb#132
  def component_class; end

  # source://icalendar//lib/icalendar/parser.rb#168
  def next_fields; end

  # source://icalendar//lib/icalendar/parser.rb#138
  def parse_component(component); end

  # source://icalendar//lib/icalendar/parser.rb#195
  def parse_fields(input); end

  # source://icalendar//lib/icalendar/parser.rb#161
  def read_in_data; end

  class << self
    # source://icalendar//lib/icalendar/parser.rb#14
    def clean_bad_wrapping(source); end
  end
end

# source://icalendar//lib/icalendar/parser.rb#188
Icalendar::Parser::BAD_LINE = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/parser.rb#190
Icalendar::Parser::BAD_LINE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#12
Icalendar::Parser::CLEAN_BAD_WRAPPING_GSUB_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#108
Icalendar::Parser::GET_WRAPPER_CLASS_GSUB_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#187
Icalendar::Parser::LINE = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/parser.rb#189
Icalendar::Parser::LINE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#181
Icalendar::Parser::NAME = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/parser.rb#165
Icalendar::Parser::NEXT_FIELDS_TAB_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#166
Icalendar::Parser::NEXT_FIELDS_WHITESPACE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#185
Icalendar::Parser::PARAM = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/parser.rb#191
Icalendar::Parser::PARAM_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#136
Icalendar::Parser::PARSE_COMPONENT_KLASS_NAME_GSUB_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#183
Icalendar::Parser::PTEXT = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/parser.rb#184
Icalendar::Parser::PVALUE = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/parser.rb#193
Icalendar::Parser::PVALUE_GSUB_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#192
Icalendar::Parser::PVALUE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#182
Icalendar::Parser::QSTR = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/parser.rb#186
Icalendar::Parser::VALUE = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/parser.rb#100
Icalendar::Parser::WRAP_IN_ARRAY_REGEX_1 = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#101
Icalendar::Parser::WRAP_IN_ARRAY_REGEX_2 = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#79
Icalendar::Parser::WRAP_PROPERTY_VALUE_DELIMETER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/parser.rb#80
Icalendar::Parser::WRAP_PROPERTY_VALUE_SPLIT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/timezone.rb#7
class Icalendar::Timezone < ::Icalendar::Component
  # @return [Timezone] a new instance of Timezone
  #
  # source://icalendar//lib/icalendar/timezone.rb#77
  def initialize; end

  # source://icalendar//lib/icalendar/has_components.rb#94
  def add_daylight(c); end

  # source://icalendar//lib/icalendar/has_components.rb#94
  def add_standard(c); end

  # source://icalendar//lib/icalendar/has_components.rb#76
  def daylight(c = T.unsafe(nil), &block); end

  # source://icalendar//lib/icalendar/timezone.rb#116
  def daylight_for(local); end

  # source://icalendar//lib/icalendar/has_components.rb#68
  def daylights; end

  # source://icalendar//lib/icalendar/has_components.rb#98
  def has_daylight?; end

  # source://icalendar//lib/icalendar/has_components.rb#98
  def has_standard?; end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def last_modified; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def last_modified=(value); end

  # source://icalendar//lib/icalendar/timezone.rb#88
  def offset_for_local(local); end

  # source://icalendar//lib/icalendar/has_components.rb#76
  def standard(c = T.unsafe(nil), &block); end

  # source://icalendar//lib/icalendar/timezone.rb#109
  def standard_for(local); end

  # source://icalendar//lib/icalendar/has_components.rb#68
  def standards; end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def tzid; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def tzid=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def tzurl; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def tzurl=(value); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/timezone.rb#81
  def valid?(strict = T.unsafe(nil)); end
end

# source://icalendar//lib/icalendar/timezone.rb#51
class Icalendar::Timezone::Daylight < ::Icalendar::Component
  include ::Icalendar::Marshable
  include ::Icalendar::Timezone::TzProperties
  extend ::Icalendar::Marshable::ClassMethods

  # @return [Daylight] a new instance of Daylight
  #
  # source://icalendar//lib/icalendar/timezone.rb#55
  def initialize; end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_comment(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rdate(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rrule(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_tzname(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def comment; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def comment=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstart; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstart=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rdate; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rdate=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rrule; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rrule=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def tzname; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def tzname=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def tzoffsetfrom; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def tzoffsetfrom=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def tzoffsetto; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def tzoffsetto=(value); end
end

# source://icalendar//lib/icalendar/timezone.rb#59
class Icalendar::Timezone::Standard < ::Icalendar::Component
  include ::Icalendar::Marshable
  include ::Icalendar::Timezone::TzProperties
  extend ::Icalendar::Marshable::ClassMethods

  # @return [Standard] a new instance of Standard
  #
  # source://icalendar//lib/icalendar/timezone.rb#63
  def initialize; end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_comment(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rdate(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rrule(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_tzname(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def comment; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def comment=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstart; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstart=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rdate; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rdate=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rrule; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rrule=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def tzname; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def tzname=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def tzoffsetfrom; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def tzoffsetfrom=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def tzoffsetto; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def tzoffsetto=(value); end
end

# source://icalendar//lib/icalendar/timezone.rb#8
module Icalendar::Timezone::TzProperties
  # source://icalendar//lib/icalendar/timezone.rb#25
  def occurrences; end

  # source://icalendar//lib/icalendar/timezone.rb#36
  def previous_occurrence(from); end

  class << self
    # @private
    #
    # source://icalendar//lib/icalendar/timezone.rb#9
    def included(base); end
  end
end

# source://icalendar//lib/icalendar/tzinfo.rb#85
module Icalendar::TimezoneOffset
  # source://icalendar//lib/icalendar/tzinfo.rb#86
  def ical_offset; end
end

# source://icalendar//lib/icalendar/timezone_store.rb#7
class Icalendar::TimezoneStore < ::SimpleDelegator
  # @return [TimezoneStore] a new instance of TimezoneStore
  #
  # source://icalendar//lib/icalendar/timezone_store.rb#9
  def initialize; end

  # source://icalendar//lib/icalendar/timezone_store.rb#32
  def retrieve(tzid); end

  # source://icalendar//lib/icalendar/timezone_store.rb#28
  def store(timezone); end

  class << self
    # source://icalendar//lib/icalendar/timezone_store.rb#13
    def instance; end

    # source://icalendar//lib/icalendar/timezone_store.rb#23
    def retrieve(tzid); end

    # source://icalendar//lib/icalendar/timezone_store.rb#18
    def store(timezone); end
  end
end

# source://icalendar//lib/icalendar/tzinfo.rb#52
module Icalendar::TimezoneTransition
  # source://icalendar//lib/icalendar/tzinfo.rb#80
  def dtstart; end

  # source://icalendar//lib/icalendar/tzinfo.rb#61
  def offset_abbreviation; end

  # source://icalendar//lib/icalendar/tzinfo.rb#53
  def offset_from; end

  # source://icalendar//lib/icalendar/tzinfo.rb#57
  def offset_to; end

  # source://icalendar//lib/icalendar/tzinfo.rb#65
  def rrule; end
end

# source://icalendar//lib/icalendar/todo.rb#5
class Icalendar::Todo < ::Icalendar::Component
  # @return [Todo] a new instance of Todo
  #
  # source://icalendar//lib/icalendar/todo.rb#49
  def initialize; end

  # source://icalendar//lib/icalendar/has_components.rb#94
  def add_alarm(c); end

  # source://icalendar//lib/icalendar/has_components.rb#76
  def alarm(c = T.unsafe(nil), &block); end

  # source://icalendar//lib/icalendar/has_components.rb#68
  def alarms; end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_attach(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_attendee(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_categories(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_comment(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_conference(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_contact(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_exdate(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_image(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rdate(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_related_to(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_request_status(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_resources(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#166
  def append_rrule(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def attach; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def attach=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def attendee; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def attendee=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def categories; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def categories=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def color; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def color=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def comment; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def comment=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def completed; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def completed=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def conference; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def conference=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def contact; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def contact=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def created; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def created=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def description; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def description=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstamp; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstamp=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def dtstart; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def dtstart=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def due; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def due=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def duration; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def duration=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def exdate; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def exdate=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def geo; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def geo=(value); end

  # source://icalendar//lib/icalendar/has_components.rb#98
  def has_alarm?; end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def image; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def image=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def ip_class; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def ip_class=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def last_modified; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def last_modified=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def location; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def location=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def organizer; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def organizer=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def percent_complete; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def percent_complete=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def priority; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def priority=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rdate; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rdate=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def recurrence_id; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def recurrence_id=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def related_to; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def related_to=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def request_status; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def request_status=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def resources; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def resources=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#158
  def rrule; end

  # source://icalendar//lib/icalendar/has_properties.rb#149
  def rrule=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def sequence; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def sequence=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def status; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def status=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def summary; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def summary=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def uid; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def uid=(value); end

  # source://icalendar//lib/icalendar/has_properties.rb#135
  def url; end

  # source://icalendar//lib/icalendar/has_properties.rb#139
  def url=(value); end
end

# source://icalendar//lib/icalendar/version.rb#5
Icalendar::VERSION = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/value.rb#9
class Icalendar::Value < ::SimpleDelegator
  # @return [Value] a new instance of Value
  #
  # source://icalendar//lib/icalendar/value.rb#13
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/value.rb#18
  def ical_param(key, value); end

  # Returns the value of attribute ical_params.
  #
  # source://icalendar//lib/icalendar/value.rb#11
  def ical_params; end

  # Sets the attribute ical_params
  #
  # @param value the value to set the attribute ical_params to.
  #
  # source://icalendar//lib/icalendar/value.rb#11
  def ical_params=(_arg0); end

  # source://icalendar//lib/icalendar/value.rb#31
  def params_ical; end

  # source://icalendar//lib/icalendar/value.rb#26
  def to_ical(default_type); end

  # source://icalendar//lib/icalendar/value.rb#22
  def value; end

  # source://icalendar//lib/icalendar/value.rb#44
  def value_type; end

  private

  # source://icalendar//lib/icalendar/value.rb#65
  def escape_param_value(value); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/value.rb#50
  def needs_value_type?(default_type); end

  # source://icalendar//lib/icalendar/value.rb#54
  def param_ical(name, param_value); end

  class << self
    # source://icalendar//lib/icalendar/value.rb#40
    def value_type; end
  end
end

# source://icalendar//lib/icalendar/value.rb#63
Icalendar::Value::ESCAPE_PARAM_VALUE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/value.rb#37
Icalendar::Value::VALUE_TYPE_GSUB_REGEX_1 = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/value.rb#38
Icalendar::Value::VALUE_TYPE_GSUB_REGEX_2 = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/array.rb#4
module Icalendar::Values; end

# source://icalendar//lib/icalendar/values/active_support_time_with_zone_adapter.rb#5
class Icalendar::Values::ActiveSupportTimeWithZoneAdapter < ::ActiveSupport::TimeWithZone; end

# source://icalendar//lib/icalendar/values/array.rb#6
class Icalendar::Values::Array < ::Icalendar::Value
  # @return [Array] a new instance of Array
  #
  # source://icalendar//lib/icalendar/values/array.rb#10
  def initialize(value, klass, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/array.rb#30
  def params_ical; end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/array.rb#43
  def valid?; end

  # Returns the value of attribute value_delimiter.
  #
  # source://icalendar//lib/icalendar/values/array.rb#8
  def value_delimiter; end

  # source://icalendar//lib/icalendar/values/array.rb#37
  def value_ical; end

  # source://icalendar//lib/icalendar/values/array.rb#48
  def value_type; end

  private

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/array.rb#54
  def needs_value_type?(default_type); end
end

# source://icalendar//lib/icalendar/values/binary.rb#8
class Icalendar::Values::Binary < ::Icalendar::Value
  # source://icalendar//lib/icalendar/values/binary.rb#10
  def params_ical; end

  # source://icalendar//lib/icalendar/values/binary.rb#16
  def value_ical; end

  private

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/binary.rb#28
  def base64?; end
end

# source://icalendar//lib/icalendar/values/binary.rb#26
Icalendar::Values::Binary::BASE_64_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/boolean.rb#6
class Icalendar::Values::Boolean < ::Icalendar::Value
  # @return [Boolean] a new instance of Boolean
  #
  # source://icalendar//lib/icalendar/values/boolean.rb#8
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/boolean.rb#12
  def value_ical; end
end

# source://icalendar//lib/icalendar/values/cal_address.rb#6
class Icalendar::Values::CalAddress < ::Icalendar::Values::Uri; end

# source://icalendar//lib/icalendar/values/date.rb#8
class Icalendar::Values::Date < ::Icalendar::Value
  # @return [Date] a new instance of Date
  #
  # source://icalendar//lib/icalendar/values/date.rb#11
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/date.rb#33
  def <=>(other); end

  # source://icalendar//lib/icalendar/values/date.rb#29
  def value_ical; end
end

# source://icalendar//lib/icalendar/values/date.rb#9
Icalendar::Values::Date::FORMAT = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/values/date.rb#41
class Icalendar::Values::Date::FormatError < ::ArgumentError; end

# DateOrDateTime can be used to set an attribute to either a Date or a DateTime value.
# It should not be used without also invoking the `call` method.
#
# source://icalendar//lib/icalendar/values/date_or_date_time.rb#6
class Icalendar::Values::DateOrDateTime < ::Icalendar::Value
  # source://icalendar//lib/icalendar/values/date_or_date_time.rb#8
  def call; end

  # source://icalendar//lib/icalendar/values/date_or_date_time.rb#16
  def params_ical; end

  # source://icalendar//lib/icalendar/values/date_or_date_time.rb#12
  def value_ical; end

  private

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/date_or_date_time.rb#30
  def needs_value_type?(default_type); end

  # source://icalendar//lib/icalendar/values/date_or_date_time.rb#22
  def parsed; end

  # source://icalendar//lib/icalendar/values/date_or_date_time.rb#34
  def value_type; end
end

# source://icalendar//lib/icalendar/values/date_time.rb#9
class Icalendar::Values::DateTime < ::Icalendar::Value
  include ::Icalendar::Values::TimeWithZone

  # @return [DateTime] a new instance of DateTime
  #
  # source://icalendar//lib/icalendar/values/date_time.rb#14
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/date_time.rb#40
  def <=>(other); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/date_time.rb#48
  def utc?; end

  # source://icalendar//lib/icalendar/values/date_time.rb#32
  def value_ical; end
end

# source://icalendar//lib/icalendar/values/date_time.rb#12
Icalendar::Values::DateTime::FORMAT = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/values/date_time.rb#52
class Icalendar::Values::DateTime::FormatError < ::ArgumentError; end

# source://icalendar//lib/icalendar/values/duration.rb#8
class Icalendar::Values::Duration < ::Icalendar::Value
  # @return [Duration] a new instance of Duration
  #
  # source://icalendar//lib/icalendar/values/duration.rb#10
  def initialize(value, params = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/duration.rb#18
  def past?; end

  # source://icalendar//lib/icalendar/values/duration.rb#22
  def value_ical; end

  private

  # source://icalendar//lib/icalendar/values/duration.rb#48
  def parse_fields(value); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/duration.rb#37
  def time?; end
end

# source://icalendar//lib/icalendar/values/duration.rb#43
Icalendar::Values::Duration::DURATION_DAYS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/duration.rb#44
Icalendar::Values::Duration::DURATION_HOURS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/duration.rb#45
Icalendar::Values::Duration::DURATION_MINUTES_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/duration.rb#41
Icalendar::Values::Duration::DURATION_PAST_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/duration.rb#46
Icalendar::Values::Duration::DURATION_SECONDS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/duration.rb#42
Icalendar::Values::Duration::DURATION_WEEKS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/float.rb#6
class Icalendar::Values::Float < ::Icalendar::Value
  # @return [Float] a new instance of Float
  #
  # source://icalendar//lib/icalendar/values/float.rb#8
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/float.rb#12
  def value_ical; end
end

# source://icalendar//lib/icalendar/values/integer.rb#6
class Icalendar::Values::Integer < ::Icalendar::Value
  # @return [Integer] a new instance of Integer
  #
  # source://icalendar//lib/icalendar/values/integer.rb#8
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/integer.rb#12
  def value_ical; end
end

# source://icalendar//lib/icalendar/values/period.rb#6
class Icalendar::Values::Period < ::Icalendar::Value
  # @return [Period] a new instance of Period
  #
  # source://icalendar//lib/icalendar/values/period.rb#10
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/period.rb#41
  def duration; end

  # source://icalendar//lib/icalendar/values/period.rb#45
  def duration=(v); end

  # source://icalendar//lib/icalendar/values/period.rb#33
  def explicit_end; end

  # source://icalendar//lib/icalendar/values/period.rb#37
  def explicit_end=(v); end

  # source://icalendar//lib/icalendar/values/period.rb#25
  def period_start; end

  # source://icalendar//lib/icalendar/values/period.rb#29
  def period_start=(v); end

  # source://icalendar//lib/icalendar/values/period.rb#21
  def value_ical; end
end

# source://icalendar//lib/icalendar/values/period.rb#8
Icalendar::Values::Period::PERIOD_LAST_PART_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#8
class Icalendar::Values::Recur < ::Icalendar::Value
  # @return [Recur] a new instance of Recur
  #
  # source://icalendar//lib/icalendar/values/recur.rb#15
  def initialize(value, params = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/recur.rb#23
  def valid?; end

  # source://icalendar//lib/icalendar/values/recur.rb#29
  def value_ical; end

  private

  # source://icalendar//lib/icalendar/values/recur.rb#64
  def parse_fields(value); end
end

# source://icalendar//lib/icalendar/values/recur.rb#10
Icalendar::Values::Recur::DAYNAME = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/values/recur.rb#12
Icalendar::Values::Recur::MONTHDAY = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/values/recur.rb#9
Icalendar::Values::Recur::NUM_LIST = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/values/recur.rb#56
Icalendar::Values::Recur::PARSE_FIELDS_BY_DAY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#55
Icalendar::Values::Recur::PARSE_FIELDS_BY_HOUR_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#54
Icalendar::Values::Recur::PARSE_FIELDS_BY_MINUTE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#57
Icalendar::Values::Recur::PARSE_FIELDS_BY_MONTH_DAY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#60
Icalendar::Values::Recur::PARSE_FIELDS_BY_MONTH_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#53
Icalendar::Values::Recur::PARSE_FIELDS_BY_SECOND_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#61
Icalendar::Values::Recur::PARSE_FIELDS_BY_SET_POSITON_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#59
Icalendar::Values::Recur::PARSE_FIELDS_BY_WEEK_NUMBER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#62
Icalendar::Values::Recur::PARSE_FIELDS_BY_WEEK_START_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#58
Icalendar::Values::Recur::PARSE_FIELDS_BY_YEAR_DAY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#51
Icalendar::Values::Recur::PARSE_FIELDS_COUNT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#49
Icalendar::Values::Recur::PARSE_FIELDS_FREQUENCY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#52
Icalendar::Values::Recur::PARSE_FIELDS_INTERVAL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#50
Icalendar::Values::Recur::PARSE_FIELDS_UNTIL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/recur.rb#11
Icalendar::Values::Recur::WEEKDAY = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/values/recur.rb#13
Icalendar::Values::Recur::YEARDAY = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/values/text.rb#5
class Icalendar::Values::Text < ::Icalendar::Value
  # @return [Text] a new instance of Text
  #
  # source://icalendar//lib/icalendar/values/text.rb#6
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/text.rb#16
  def value_ical; end
end

# source://icalendar//lib/icalendar/values/text.rb#14
Icalendar::Values::Text::VALUE_ICAL_CARRIAGE_RETURN_GSUB_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/time.rb#9
class Icalendar::Values::Time < ::Icalendar::Value
  include ::Icalendar::Values::TimeWithZone

  # @return [Time] a new instance of Time
  #
  # source://icalendar//lib/icalendar/values/time.rb#14
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/time.rb#25
  def value_ical; end
end

# source://icalendar//lib/icalendar/values/time.rb#12
Icalendar::Values::Time::FORMAT = T.let(T.unsafe(nil), String)

# source://icalendar//lib/icalendar/values/time_with_zone.rb#23
module Icalendar::Values::TimeWithZone
  # source://icalendar//lib/icalendar/values/time_with_zone.rb#26
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/time_with_zone.rb#49
  def params_ical; end

  # Returns the value of attribute tz_utc.
  #
  # source://icalendar//lib/icalendar/values/time_with_zone.rb#24
  def tz_utc; end
end

# source://icalendar//lib/icalendar/values/uri.rb#8
class Icalendar::Values::Uri < ::Icalendar::Value
  # @return [Uri] a new instance of Uri
  #
  # source://icalendar//lib/icalendar/values/uri.rb#10
  def initialize(value, params = T.unsafe(nil)); end

  # source://icalendar//lib/icalendar/values/uri.rb#15
  def value_ical; end
end

# source://icalendar//lib/icalendar/values/utc_offset.rb#7
class Icalendar::Values::UtcOffset < ::Icalendar::Value
  # @return [UtcOffset] a new instance of UtcOffset
  #
  # source://icalendar//lib/icalendar/values/utc_offset.rb#8
  def initialize(value, params = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/utc_offset.rb#17
  def behind?; end

  # source://icalendar//lib/icalendar/values/utc_offset.rb#26
  def to_s; end

  # source://icalendar//lib/icalendar/values/utc_offset.rb#22
  def value_ical; end

  private

  # source://icalendar//lib/icalendar/values/utc_offset.rb#44
  def parse_fields(value); end

  # @return [Boolean]
  #
  # source://icalendar//lib/icalendar/values/utc_offset.rb#37
  def zero_offset?; end
end

# source://icalendar//lib/icalendar/values/utc_offset.rb#41
Icalendar::Values::UtcOffset::PARSE_FIELDS_MD_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/values/utc_offset.rb#42
Icalendar::Values::UtcOffset::PARSE_FIELDS_WHITESPACE_GSUB_REGEX = T.let(T.unsafe(nil), Regexp)

# source://icalendar//lib/icalendar/tzinfo.rb#94
module TZInfo
  class << self
    # source://tzinfo/2.0.6/lib/tzinfo.rb#14
    def eager_load!; end
  end
end

# source://icalendar//lib/icalendar/tzinfo.rb#95
class TZInfo::Timezone
  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1105
  def <=>(tz); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1128
  def =~(regexp); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1137
  def _dump(limit); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1048
  def abbr(time = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1048
  def abbreviation(time = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1081
  def base_utc_offset(time = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#987
  def canonical_identifier; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#412
  def canonical_zone; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#997
  def current_period; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1008
  def current_period_and_time; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1008
  def current_time_and_period; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1059
  def dst?(time = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1113
  def eql?(tz); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#277
  def friendly_identifier(skip_first_part = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1118
  def hash; end

  # source://icalendar//lib/icalendar/tzinfo.rb#96
  def ical_timezone(date, dst = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#241
  def identifier; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#259
  def inspect; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#831
  def local_datetime(year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), minute = T.unsafe(nil), second = T.unsafe(nil), sub_second = T.unsafe(nil), dst = T.unsafe(nil), &block); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#743
  def local_time(year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), minute = T.unsafe(nil), second = T.unsafe(nil), sub_second = T.unsafe(nil), dst = T.unsafe(nil), &block); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#919
  def local_timestamp(year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), minute = T.unsafe(nil), second = T.unsafe(nil), sub_second = T.unsafe(nil), dst = T.unsafe(nil), &block); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#645
  def local_to_utc(local_time, dst = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#247
  def name; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#992
  def now; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1094
  def observed_utc_offset(time = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#947
  def offsets_up_to(to, from = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#319
  def period_for(time); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#494
  def period_for_local(local_time, dst = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#425
  def period_for_utc(utc_time); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#342
  def periods_for_local(local_time); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1039
  def strftime(format, time = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#548
  def to_local(time); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#253
  def to_s; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#370
  def transitions_up_to(to, from = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1094
  def utc_offset(time = T.unsafe(nil)); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#572
  def utc_to_local(utc_time); end

  private

  # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1156
  def raise_unknown_timezone; end

  class << self
    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#1147
    def _load(data); end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#151
    def all; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#219
    def all_country_zone_identifiers; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#206
    def all_country_zones; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#175
    def all_data_zone_identifiers; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#169
    def all_data_zones; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#157
    def all_identifiers; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#193
    def all_linked_zone_identifiers; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#187
    def all_linked_zones; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#110
    def default_dst; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#96
    def default_dst=(value); end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#127
    def get(identifier); end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#141
    def get_proxy(identifier); end

    private

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#234
    def data_source; end

    # source://tzinfo/2.0.6/lib/tzinfo/timezone.rb#229
    def get_proxies(identifiers); end
  end
end

# source://icalendar//lib/icalendar/tzinfo.rb#127
class TZInfo::TimezoneOffset
  include ::Icalendar::TimezoneOffset

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#62
  def initialize(base_utc_offset, std_offset, abbreviation); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#84
  def ==(toi); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#50
  def abbr; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#50
  def abbreviation; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#21
  def base_utc_offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#74
  def dst?; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#95
  def eql?(toi); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#101
  def hash; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#107
  def inspect; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#43
  def observed_utc_offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#37
  def std_offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#21
  def utc_offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_offset.rb#43
  def utc_total_offset; end
end

# source://icalendar//lib/icalendar/tzinfo.rb#132
class TZInfo::TimezonePeriod
  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#23
  def initialize(offset); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#80
  def abbr; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#80
  def abbreviation; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#54
  def base_utc_offset; end

  # For DST, use the start_transition,
  # for standard TZ, use the following period (starting from the end_transition).
  #
  # source://icalendar//lib/icalendar/tzinfo.rb#136
  def daylight; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#99
  def dst?; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#36
  def end_transition; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#125
  def ends_at; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#151
  def local_ends_at; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#138
  def local_starts_at; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#90
  def observed_utc_offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#16
  def offset; end

  # source://icalendar//lib/icalendar/tzinfo.rb#160
  def single; end

  # For standard TZ, use the start_transition,
  # for DST, use the following period, (starting from the end_transition)
  #
  # source://icalendar//lib/icalendar/tzinfo.rb#150
  def standard; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#30
  def start_transition; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#112
  def starts_at; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#72
  def std_offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#54
  def utc_offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#90
  def utc_total_offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#80
  def zone_identifier; end

  private

  # source://icalendar//lib/icalendar/tzinfo.rb#170
  def build_timezone(timezone, transition); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#161
  def raise_not_implemented(method_name); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#168
  def timestamp(transition); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_period.rb#175
  def timestamp_with_offset(transition); end
end

# source://icalendar//lib/icalendar/tzinfo.rb#117
class TZInfo::TimezoneTransition
  include ::Icalendar::TimezoneTransition

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#34
  def initialize(offset, previous_offset, timestamp_value); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#86
  def ==(tti); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#48
  def at; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#86
  def eql?(tti); end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#94
  def hash; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#62
  def local_end_at; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#76
  def local_start_at; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#9
  def offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#12
  def previous_offset; end

  # source://tzinfo/2.0.6/lib/tzinfo/timezone_transition.rb#21
  def timestamp_value; end
end
