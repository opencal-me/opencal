"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type Activity implements Node {
  address: String
  addressPlaceName: String
  coordinates: Coordinates
  descriptionHtml: String
  durationSeconds: Int!
  end: DateTime!
  googleEventId: String!

  """ID of the object."""
  id: ID!
  isOwnedByViewer: Boolean!
  joinUrl: String!
  location: String
  name: String!
  openings: Int!
  owner: User!
  reservations: [Reservation!]!
  shareUrl: String!
  start: DateTime!
  storyImageUrl: String!
  tags: [String!]!
  url: String!
}

"""Autogenerated input type of ConvertGoogleEvent"""
input ConvertGoogleEventInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  googleEventId: String!
}

"""Autogenerated return type of ConvertGoogleEvent."""
type ConvertGoogleEventPayload {
  activity: Activity

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
}

type Coordinates {
  latitude: Float!
  longitude: Float!
}

"""Autogenerated input type of CreateActivity"""
input CreateActivityInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  description: String
  durationSeconds: Int!
  location: String
  name: String!
  start: DateTime!
}

"""Autogenerated return type of CreateActivity."""
type CreateActivityPayload {
  activity: Activity!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of CreateMobileSubscription"""
input CreateMobileSubscriptionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  subjectId: ID!
  subscriberPhone: String!
}

"""Autogenerated return type of CreateMobileSubscription."""
type CreateMobileSubscriptionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  subscription: MobileSubscription
  success: Boolean!
}

"""Autogenerated input type of CreateReservation"""
input CreateReservationInput {
  activityId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
  name: String!
  note: String
  phone: String
}

"""Autogenerated return type of CreateReservation."""
type CreateReservationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  reservation: Reservation
  success: Boolean!
}

"""An ISO 8601-encoded date"""
scalar Date

"""An ISO 8601-encoded datetime"""
scalar DateTime

"""Autogenerated input type of DeleteMobileSubscription"""
input DeleteMobileSubscriptionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  subscriptionId: ID!
}

"""Autogenerated return type of DeleteMobileSubscription."""
type DeleteMobileSubscriptionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  subject: User!
  success: Boolean!
}

type GoogleEvent {
  activity: Activity
  descriptionHtml: String
  durationSeconds: Int!
  end: DateTime!
  id: String!
  isOrganizedByViewer: Boolean!
  isRecurring: Boolean!
  location: String
  start: DateTime!
  title: String
}

type Image implements Node {
  """ID of the object."""
  id: ID!
  signedId: String!
  url(size: ImageSize = MD): String!
}

enum ImageSize {
  LG
  MD
  SM
}

type InputFieldError {
  field: String!
  message: String!
}

type MobileSubscriber implements Node {
  """ID of the object."""
  id: ID!
  phone: String!
}

type MobileSubscription implements Node {
  """ID of the object."""
  id: ID!
  subject: User!
  subscriber: MobileSubscriber!
}

type Mutation {
  convertGoogleEvent(
    """Parameters for ConvertGoogleEvent"""
    input: ConvertGoogleEventInput!
  ): ConvertGoogleEventPayload!
  createActivity(
    """Parameters for CreateActivity"""
    input: CreateActivityInput!
  ): CreateActivityPayload!
  createMobileSubscription(
    """Parameters for CreateMobileSubscription"""
    input: CreateMobileSubscriptionInput!
  ): CreateMobileSubscriptionPayload!
  createReservation(
    """Parameters for CreateReservation"""
    input: CreateReservationInput!
  ): CreateReservationPayload!
  deleteMobileSubscription(
    """Parameters for DeleteMobileSubscription"""
    input: DeleteMobileSubscriptionInput!
  ): DeleteMobileSubscriptionPayload!
  testMutation(
    """Parameters for TestMutation"""
    input: TestMutationInput!
  ): TestMutationPayload!
  updateUser(
    """Parameters for UpdateUser"""
    input: UpdateUserInput!
  ): UpdateUserPayload!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type Query {
  activity(id: ID!): Activity
  activityStatus: String
  announcement: String

  """When the server was booted."""
  bootedAt: DateTime!
  contactEmail: String!
  imageBySignedId(signedId: String!): Image
  mobileSubscription(id: ID!): MobileSubscription
  passwordStrength(password: String!): Float!
  reservation(id: ID!): Reservation
  testEcho(text: String): String!
  user(id: ID!): User
  viewer: User
}

type Reservation implements Node {
  activity: Activity!
  createdAt: DateTime!
  email: String!

  """ID of the object."""
  id: ID!
  name: String!
  note: String
  phone: String
  status: ReservationStatus!
}

enum ReservationStatus {
  CONFIRMED
  PENDING
  REJECTED
}

type Subscription {
  activityStatus: String
  testSubscription: Int!
}

type TestModel {
  birthday: Date
  id: ID!
  name: String!
}

"""Autogenerated input type of TestMutation"""
input TestMutationInput {
  birthday: Date

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of TestMutation."""
type TestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  model: TestModel
  success: Boolean!
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput {
  bio: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  userId: ID!
}

"""Autogenerated return type of UpdateUser."""
type UpdateUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

type User implements Node {
  activities(showHidden: Boolean, showRecentlyEnded: Boolean): [Activity!]!
  avatarUrl: String
  bio: String
  email: String!
  firstName: String!
  googleEvents(query: String): [GoogleEvent!]!

  """ID of the object."""
  id: ID!
  initials: String!
  isAdmin: Boolean!
  isViewer: Boolean!
  lastName: String
  mobileSubscriptions: [MobileSubscription!]!
  name: String!
  url: String!
}